--- https://docs.multion.ai/ ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/learn/browser-extension ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/welcome#why-multion ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/build/hm ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/build/hm#scrape-multiple-pages-in-parallel ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/learn/sessions ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/learn/sessions#close-a-session-manually ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/quick-start ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/build/hm#scrape-first-page ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/learn/sessions#speed-modes ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/learn/skills ---
Skills Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Skills What are skills? Skills Screen Skills are a no-code way to improve and teach our Agent new behavior accessible on our Agent Profile Page . Skills can be defined as natural language rules to control the Agent on specific websites and customize the browsing experience.
This can be used to steer the agent’s behavior and add security guardrails for sensitive tasks Community ideas Build a skill learning library, akin to Voyager. Discover skills in a retrieval directory with upvoting and a Marketplace. Get creative with custom skills, like a Recruiter skill for Linkedin or a Cold Email skill for Gmail. Unleash your creativity with MultiOn Skills! Join our Discord or reach out to us at our email . Was this page helpful? Yes No Post on X Up Next On this page What are skills? Community ideas Built with

--- https://docs.multion.ai/build/cookbook ---
Cookbook Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Cookbook For more examples and recipes for MultiOn, check out our cookbook on GitHub. MultiOn Cookbook GitHub A collection of examples and recipes for MultiOn Table of recipes Projects Internet of Agents - deploy a swarm of web agents with MultiOn Notebooks Scrape LinkedIn - scrape LinkedIn with MultiOn Contributing We welcome any contributions to the MultiOn Cookbook, whether it’s submitting an idea, fixing a typo, adding a new guide, or improving an existing one. To contribute, please review the contribution guidelines here . Was this page helpful? Yes No On this page Table of recipes Projects Notebooks Contributing Built with

--- https://docs.multion.ai/welcome#get-support ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/welcome#stay-up-to-date ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/quick-start#install-package ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/learn/sessions#step-through-a-session ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/build/hm#install-package ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/learn/browser-extension#enable-api ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/quick-start#develop-locally-with-the-browser-extension ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/build/cookbook#notebooks ---
Cookbook Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Cookbook For more examples and recipes for MultiOn, check out our cookbook on GitHub. MultiOn Cookbook GitHub A collection of examples and recipes for MultiOn Table of recipes Projects Internet of Agents - deploy a swarm of web agents with MultiOn Notebooks Scrape LinkedIn - scrape LinkedIn with MultiOn Contributing We welcome any contributions to the MultiOn Cookbook, whether it’s submitting an idea, fixing a typo, adding a new guide, or improving an existing one. To contribute, please review the contribution guidelines here . Was this page helpful? Yes No On this page Table of recipes Projects Notebooks Contributing Built with

--- https://docs.multion.ai/learn/sessions#use-proxy ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/learn/skills#what-are-skills ---
Skills Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Skills What are skills? Skills Screen Skills are a no-code way to improve and teach our Agent new behavior accessible on our Agent Profile Page . Skills can be defined as natural language rules to control the Agent on specific websites and customize the browsing experience.
This can be used to steer the agent’s behavior and add security guardrails for sensitive tasks Community ideas Build a skill learning library, akin to Voyager. Discover skills in a retrieval directory with upvoting and a Marketplace. Get creative with custom skills, like a Recruiter skill for Linkedin or a Cold Email skill for Gmail. Unleash your creativity with MultiOn Skills! Join our Discord or reach out to us at our email . Was this page helpful? Yes No Post on X Up Next On this page What are skills? Community ideas Built with

--- https://docs.multion.ai/step-api/sessions/create ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/build/cookbook#table-of-recipes ---
Cookbook Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Cookbook For more examples and recipes for MultiOn, check out our cookbook on GitHub. MultiOn Cookbook GitHub A collection of examples and recipes for MultiOn Table of recipes Projects Internet of Agents - deploy a swarm of web agents with MultiOn Notebooks Scrape LinkedIn - scrape LinkedIn with MultiOn Contributing We welcome any contributions to the MultiOn Cookbook, whether it’s submitting an idea, fixing a typo, adding a new guide, or improving an existing one. To contribute, please review the contribution guidelines here . Was this page helpful? Yes No On this page Table of recipes Projects Notebooks Contributing Built with

--- https://docs.multion.ai/learn/sessions#local-mode ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/quick-start#start-building ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/build/hm#run-script ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/quick-start#create-your-first-agent ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/build/x ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/learn/browser-extension#usage ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/step-api/sessions/step ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/release/developer ---
Developer Platform Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Release Notes Developer Platform Browser Extension Support Dashboard Release Notes Developer Platform See all the latest changes in the MultiOn Agent API and developer platform. June 18, 2024 Complete documentation overhaul with new guides, examples, and release notes! June 14, 2024 New retrieve is live with faster speeds and better accuracy. Learn more about it here . Was this page helpful? Yes No Browser Extension Up Next On this page June 18, 2024 June 14, 2024 Built with

--- https://docs.multion.ai/autonomous-api/retrieve ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/build/amazon ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/build/hm#project-setup ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/sdks/overview ---
Client SDKs Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Client SDKs We provide official open-source SDKs (client libraries) for your favorite languages: such as Typescript and Python. These clients make connecting to our API faster and error-free. Node.js SDK MultiOn for Typescript/Node.js Python SDK MultiOn for Python Request a new SDK If you’d like to request an SDK for a language that we don’t currently support, let us know on Discord . We’re always looking to expand our SDK offerings and would love to hear from you. Was this page helpful? Yes No Node.js Up Next Built with

--- https://docs.multion.ai/build/cookbook#projects ---
Cookbook Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Cookbook For more examples and recipes for MultiOn, check out our cookbook on GitHub. MultiOn Cookbook GitHub A collection of examples and recipes for MultiOn Table of recipes Projects Internet of Agents - deploy a swarm of web agents with MultiOn Notebooks Scrape LinkedIn - scrape LinkedIn with MultiOn Contributing We welcome any contributions to the MultiOn Cookbook, whether it’s submitting an idea, fixing a typo, adding a new guide, or improving an existing one. To contribute, please review the contribution guidelines here . Was this page helpful? Yes No On this page Table of recipes Projects Notebooks Contributing Built with

--- https://docs.multion.ai/learn/sessions#create-a-session-manually ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/learn/browser-extension#sign-in ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/autonomous-api/browse ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/learn/retrieve ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/welcome ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/build/hm#import-library ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/release/extension ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Release Notes Developer Platform Browser Extension Support Dashboard Release Notes Browser Extension See all the latest changes in the MultiOn browser extension. Browser Extension Release Notes Official MultiOn browser extension release notes Was this page helpful? Yes No Built with

--- https://docs.multion.ai/build/x#run-script ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/api-reference/sessions/close ---
Close Session Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Step API Reference Close Session DEL https:// api.multion.ai / v1 / web / session / : session_id Closes the session. Path parameters session_id string Required Response This endpoint returns an object status string response data session_id string The unique identifier for the session, duplicated for convenience. DEL / v1 / web / session / : session_id cURL 1 curl -X DELETE https://api.multion.ai/v1/web/session/session_id \ 2 -H "X_MULTION_API_KEY: <apiKey>" 200 Deleted 1 { 2 "status": "status", 3 "session_id": "session_id" 4 } Built with

--- https://docs.multion.ai/build/x#initialize-client ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/learn/browser-extension#installation ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/build/x#hello-world ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/build/amazon#project-setup ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/build/hm#scrape-multiple-pages-autonomously ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/build/amazon#run-script ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/build/amazon#install-extension ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/build/amazon#import-library ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/learn/browser-extension#install-on-chrome ---
Browser Extension Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Browser Extension Installation Install on Chrome Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Sign in Sign in to your MultiOn account. If you don’t have one, create one here . Enable API To use local mode with the Agent API, click on the MultiOn extension in the extensions folder of your browser (not the hovering MultiOn icon on the web page) to open the extension configurations. Click the API Enabled toggle to enable the API. Usage Hover over the hovering MultiOn extension icon on any webpage and click Chat to start a browsing session directly on the page, no code required. Create and run browsing sessions with the Agent API using local mode . Was this page helpful? Yes No Sessions Up Next On this page Installation Usage Built with

--- https://docs.multion.ai/build/cookbook#contributing ---
Cookbook Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Cookbook For more examples and recipes for MultiOn, check out our cookbook on GitHub. MultiOn Cookbook GitHub A collection of examples and recipes for MultiOn Table of recipes Projects Internet of Agents - deploy a swarm of web agents with MultiOn Notebooks Scrape LinkedIn - scrape LinkedIn with MultiOn Contributing We welcome any contributions to the MultiOn Cookbook, whether it’s submitting an idea, fixing a typo, adding a new guide, or improving an existing one. To contribute, please review the contribution guidelines here . Was this page helpful? Yes No On this page Table of recipes Projects Notebooks Contributing Built with

--- https://docs.multion.ai/quick-start#learn-concepts ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/build/hm#initialize-project ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/build/x#initialize-project ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/sdks/python ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/learn/sessions#what-is-an-agent-session ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

--- https://docs.multion.ai/sdks/python#custom-http-client ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/sdks/python#usage ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/build/amazon#buy-the-book ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/learn/skills#community-ideas ---
Skills Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Skills What are skills? Skills Screen Skills are a no-code way to improve and teach our Agent new behavior accessible on our Agent Profile Page . Skills can be defined as natural language rules to control the Agent on specific websites and customize the browsing experience.
This can be used to steer the agent’s behavior and add security guardrails for sensitive tasks Community ideas Build a skill learning library, akin to Voyager. Discover skills in a retrieval directory with upvoting and a Marketplace. Get creative with custom skills, like a Recruiter skill for Linkedin or a Cold Email skill for Gmail. Unleash your creativity with MultiOn Skills! Join our Discord or reach out to us at our email . Was this page helpful? Yes No Post on X Up Next On this page What are skills? Community ideas Built with

--- https://docs.multion.ai/sdks/node ---
Node.js SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Node.js SDK Installation $ npm install --save multion > # or > yarn add multion In Deno (1.25+) you can import by doing: 1 import { MultiOnClient } from "npm:multion"; Usage 1 import { MultiOnClient, MultiOn } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "YOUR_API_KEY", // Defaults to process.env.MULTION_API_KEY 5 }); 6 7 const response = await multion.browse({ 8 url: "https://www.google.com" 9 }) Request and Response Types The SDK exports all request and response types as TypeScript interfaces. Simply import them under the MultiOn namespace: 1 import { MultiOn } from "multion"; 2 3 const message: MultiOn.Message = { 4 url: "https://www.google.com", 5 includeScreenshot: true, 6 } Exception Handling When the API returns a non-success status code (4xx or 5xx response),
a subclass of MultiOnError will be thrown: 1 import { MultiOnError } from 'multion'; 2 3 try { 4 await multion.browse(...); 5 } catch (err) { 6 if (err instanceof MultiOnError) { 7 console.log(err.statusCode); 8 console.log(err.message); 9 console.log(err.body); 10 } 11 } Advanced Retries The MultiOn Node SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit (default: 2). A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the maxRetries request option to configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 maxRetries: 0 // override maxRetries at the request level 3 }); Timeouts The SDK defaults to a 60 second timout. Use the timeoutInSeconds option to
configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 timeoutInSeconds: 30 // override timeout to 30s 3 }); Custom HTTP client The SDK provides a way for you to customize the underlying HTTP client / Fetch function. If you’re
running in an unsupported environment, this provides a way for you to break the glass and
ensure the SDK works. 1 import { MultiOnClient } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "...", 5 fetcher: // provide your implementation here 6 }); Runtime compatiblity The SDK defaults to node-fetch but will use the global fetch client if present. The SDK
works in the following runtimes: The following runtimes are supported: Node.js 18+ Vercel Cloudflare Workers Deno v1.25+ Bun 1.0+ GitHub npm Was this page helpful? Yes No Python Up Next On this page Installation Usage Request and Response Types Exception Handling Advanced Retries Timeouts Custom HTTP client Runtime compatiblity Built with

--- https://docs.multion.ai/learn/retrieve#max-items ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/quick-start#send-your-first-request ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/learn/retrieve#get-retreive-screenshot ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/step-api/sessions/close ---
Welcome to MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Welcome to MultiOn MultiOn is the Motor Cortex layer for AI , enabling autonomous actions on the web using natural language commands with millions of concurrent AI Agents ready to run. Quick Start Create your first web browsing agent with the Agent API Playground Experience MultiOn agent capabilities, no setup required Why MultiOn? MultiOn makes it easy to build autonomous web agents with: Secure remote sessions with native proxy support to navigate tricky bot protection. Chrome browser extension to interact with the agent locally. Best-in-class full page structured LLM data scraping . Infinite scalability with parallel agents . Stay up to date Discord Receive support from our team and discover how the community is building with MultiOn Blog Read the latest news and updates from MultiOn developers Get support Want to get in touch with the MultiOn team? Reach out to us via Discord or email . Was this page helpful? Yes No Quick Start Up Next On this page Why MultiOn? Stay up to date Get support Built with

--- https://docs.multion.ai/learn/retrieve#use-proxy ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/sdks/python#async-client ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/sdks/python#exception-handling ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/build/amazon#initialize-project ---
Order on Amazon with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Order on Amazon with MultiOn This example combines MultiOn browse and local mode to purchase a book on Amazon. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Add book to cart Use browse in local mode to add the book to your shopping cart. TypeScript Python 1 const cartResponse = await multion.browse({ 2 cmd: "Add the Three Body Problem book to my cart", 3 url: "https://amazon.com", 4 local: true 5 }); 6 7 console.log(cartResponse.message); Buy the book! Now, if you want to buy the book, continue the same session to complete the purchase. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const purchaseResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Check out and purchase the book" 6 }); 7 8 console.log(purchaseResponse.message); Was this page helpful? Yes No Cookbook Up Next On this page Project setup Add book to cart Buy the book! Built with

--- https://docs.multion.ai/sdks/node#request-and-response-types ---
Node.js SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Node.js SDK Installation $ npm install --save multion > # or > yarn add multion In Deno (1.25+) you can import by doing: 1 import { MultiOnClient } from "npm:multion"; Usage 1 import { MultiOnClient, MultiOn } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "YOUR_API_KEY", // Defaults to process.env.MULTION_API_KEY 5 }); 6 7 const response = await multion.browse({ 8 url: "https://www.google.com" 9 }) Request and Response Types The SDK exports all request and response types as TypeScript interfaces. Simply import them under the MultiOn namespace: 1 import { MultiOn } from "multion"; 2 3 const message: MultiOn.Message = { 4 url: "https://www.google.com", 5 includeScreenshot: true, 6 } Exception Handling When the API returns a non-success status code (4xx or 5xx response),
a subclass of MultiOnError will be thrown: 1 import { MultiOnError } from 'multion'; 2 3 try { 4 await multion.browse(...); 5 } catch (err) { 6 if (err instanceof MultiOnError) { 7 console.log(err.statusCode); 8 console.log(err.message); 9 console.log(err.body); 10 } 11 } Advanced Retries The MultiOn Node SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit (default: 2). A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the maxRetries request option to configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 maxRetries: 0 // override maxRetries at the request level 3 }); Timeouts The SDK defaults to a 60 second timout. Use the timeoutInSeconds option to
configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 timeoutInSeconds: 30 // override timeout to 30s 3 }); Custom HTTP client The SDK provides a way for you to customize the underlying HTTP client / Fetch function. If you’re
running in an unsupported environment, this provides a way for you to break the glass and
ensure the SDK works. 1 import { MultiOnClient } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "...", 5 fetcher: // provide your implementation here 6 }); Runtime compatiblity The SDK defaults to node-fetch but will use the global fetch client if present. The SDK
works in the following runtimes: The following runtimes are supported: Node.js 18+ Vercel Cloudflare Workers Deno v1.25+ Bun 1.0+ GitHub npm Was this page helpful? Yes No Python Up Next On this page Installation Usage Request and Response Types Exception Handling Advanced Retries Timeouts Custom HTTP client Runtime compatiblity Built with

--- https://docs.multion.ai/sdks/node#advanced ---
Node.js SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Node.js SDK Installation $ npm install --save multion > # or > yarn add multion In Deno (1.25+) you can import by doing: 1 import { MultiOnClient } from "npm:multion"; Usage 1 import { MultiOnClient, MultiOn } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "YOUR_API_KEY", // Defaults to process.env.MULTION_API_KEY 5 }); 6 7 const response = await multion.browse({ 8 url: "https://www.google.com" 9 }) Request and Response Types The SDK exports all request and response types as TypeScript interfaces. Simply import them under the MultiOn namespace: 1 import { MultiOn } from "multion"; 2 3 const message: MultiOn.Message = { 4 url: "https://www.google.com", 5 includeScreenshot: true, 6 } Exception Handling When the API returns a non-success status code (4xx or 5xx response),
a subclass of MultiOnError will be thrown: 1 import { MultiOnError } from 'multion'; 2 3 try { 4 await multion.browse(...); 5 } catch (err) { 6 if (err instanceof MultiOnError) { 7 console.log(err.statusCode); 8 console.log(err.message); 9 console.log(err.body); 10 } 11 } Advanced Retries The MultiOn Node SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit (default: 2). A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the maxRetries request option to configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 maxRetries: 0 // override maxRetries at the request level 3 }); Timeouts The SDK defaults to a 60 second timout. Use the timeoutInSeconds option to
configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 timeoutInSeconds: 30 // override timeout to 30s 3 }); Custom HTTP client The SDK provides a way for you to customize the underlying HTTP client / Fetch function. If you’re
running in an unsupported environment, this provides a way for you to break the glass and
ensure the SDK works. 1 import { MultiOnClient } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "...", 5 fetcher: // provide your implementation here 6 }); Runtime compatiblity The SDK defaults to node-fetch but will use the global fetch client if present. The SDK
works in the following runtimes: The following runtimes are supported: Node.js 18+ Vercel Cloudflare Workers Deno v1.25+ Bun 1.0+ GitHub npm Was this page helpful? Yes No Python Up Next On this page Installation Usage Request and Response Types Exception Handling Advanced Retries Timeouts Custom HTTP client Runtime compatiblity Built with

--- https://docs.multion.ai/quick-start#generate-api-key ---
Quick Start Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Get Started Quick Start Create your first agent Generate API key Sign up on our developer console and create a new API key . Remember, your API key is your access secret—keep it safe with environment variables. Install package Install the MultiOn SDK for your preferred language. TypeScript Python $ npm install multion Send your first request Try scraping a webpage with the Agent API. Be sure to replace MULTION_API_KEY with your actual API key. cURL TypeScript Python $ curl -X POST https://api.multion.ai/v1/web/browse \ > -H "X_MULTION_API_KEY: MULTION_API_KEY" \ > -H "Content-Type: application/json" \ > -d '{ > "cmd": "Find the top comment of the top post on Hackernews.", > "url": "https://news.ycombinator.com/" > }' Develop locally with the browser extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Learn concepts Learn more about core MultiOn concepts to build complex applications with agents. Browser Extension Learn to use the browser extension Sessions Learn to manage agent sessions Retrieve Learn to scrape structured data Skills Learn to create agent skills Start building That’s it! You’re ready to start building your own autonomous web agents. Here are a couple of examples to get you started. Happy building! 🙌 Scrape H&M Learn to use step and retrieve to scrape structured data Post on X Learn to use browse and local mode to take actions autonomously Was this page helpful? Yes No Browser Extension Up Next On this page Create your first agent Learn concepts Start building Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/retrieve ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Retrieve POST https:// api.multion.ai / v1 / web / retrieve Retrieve data from webpage based on a url and natural language command that guides agents data extraction process. The function can create a new session or be used as part of a session. Request This endpoint expects an object. cmd string Required A specific natural language instruction on data the agent should extract. url string Optional The URL to create or continue session from. session_id string Optional Continues the session with session_id if provided. local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. fields list of strings Optional List of fields (columns) to be outputted in data. format "json" Optional Format of response data. (Default: json) max_items double Optional Defaults to 100 Maximum number of data items to retrieve. (Default: 100) full_page boolean Optional Flag to retrieve full page (Default: True). If set to false, the data will only be retrieved from the current session viewport. render_js boolean Optional Flag to include rich JS and ARIA elements in data retrieved. (Default: False) scroll_to_bottom boolean Optional Flag to scroll to the bottom of the page (Default: False). If set to true, the page will be scrolled to the bottom for a maximum of 5 seconds before data is retrieved. include_screenshot boolean Optional Flag to include a screenshot with the response. (Default: False) Response Expand all Collapse all This endpoint returns an object message string information relating to response url string The last accessed URL during the session. status string The current status of the session. data list of maps from strings to any Array of data objects, each containing data requested in fields. screenshot string Optional image url of the screenshot taken during the session. session_id string Optional The unique identifier for the session. POST / v1 / web / retrieve cURL 1 curl -X POST https://api.multion.ai/v1/web/retrieve \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews and get its title and points.", 6 "url": "https://news.ycombinator.com/", 7 "fields": [ 8 "title", 9 "points" 10 ] 11 }' 200 Successful 1 { 2 "message": "Retrieved data successfully", 3 "url": "https://news.ycombinator.com/", 4 "status": "DONE", 5 "data": [ 6 { 7 "title": "Show HN: Sonauto – a more controllable AI music creator", 8 "points": 219 9 } 10 ], 11 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 12 "session_id": "1" 13 } Built with

--- https://docs.multion.ai/learn/retrieve#retrieve-as-part-of-a-session ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/learn/retrieve#what-is-retrieve ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/retrieve#request.body.include_screenshot ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Retrieve POST https:// api.multion.ai / v1 / web / retrieve Retrieve data from webpage based on a url and natural language command that guides agents data extraction process. The function can create a new session or be used as part of a session. Request This endpoint expects an object. cmd string Required A specific natural language instruction on data the agent should extract. url string Optional The URL to create or continue session from. session_id string Optional Continues the session with session_id if provided. local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. fields list of strings Optional List of fields (columns) to be outputted in data. format "json" Optional Format of response data. (Default: json) max_items double Optional Defaults to 100 Maximum number of data items to retrieve. (Default: 100) full_page boolean Optional Flag to retrieve full page (Default: True). If set to false, the data will only be retrieved from the current session viewport. render_js boolean Optional Flag to include rich JS and ARIA elements in data retrieved. (Default: False) scroll_to_bottom boolean Optional Flag to scroll to the bottom of the page (Default: False). If set to true, the page will be scrolled to the bottom for a maximum of 5 seconds before data is retrieved. include_screenshot boolean Optional Flag to include a screenshot with the response. (Default: False) Response Expand all Collapse all This endpoint returns an object message string information relating to response url string The last accessed URL during the session. status string The current status of the session. data list of maps from strings to any Array of data objects, each containing data requested in fields. screenshot string Optional image url of the screenshot taken during the session. session_id string Optional The unique identifier for the session. POST / v1 / web / retrieve cURL 1 curl -X POST https://api.multion.ai/v1/web/retrieve \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews and get its title and points.", 6 "url": "https://news.ycombinator.com/", 7 "fields": [ 8 "title", 9 "points" 10 ] 11 }' 200 Successful 1 { 2 "message": "Retrieved data successfully", 3 "url": "https://news.ycombinator.com/", 4 "status": "DONE", 5 "data": [ 6 { 7 "title": "Show HN: Sonauto – a more controllable AI music creator", 8 "points": 219 9 } 10 ], 11 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 12 "session_id": "1" 13 } Built with

--- https://docs.multion.ai/learn/retrieve#local-mode ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/api-reference/sessions/close#response.body.status ---
Close Session Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Step API Reference Close Session DEL https:// api.multion.ai / v1 / web / session / : session_id Closes the session. Path parameters session_id string Required Response This endpoint returns an object status string response data session_id string The unique identifier for the session, duplicated for convenience. DEL / v1 / web / session / : session_id cURL 1 curl -X DELETE https://api.multion.ai/v1/web/session/session_id \ 2 -H "X_MULTION_API_KEY: <apiKey>" 200 Deleted 1 { 2 "status": "status", 3 "session_id": "session_id" 4 } Built with

--- https://docs.multion.ai/build/x#install-extension ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/build/x#project-setup ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/build/x#follow-multion ---
Post on X with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Post on X with MultiOn This example combines MultiOn browse and local mode to post a loving message on X. Project setup TypeScript Python Install extension Find the MultiOn Browser Extension on the Chrome Web Store and click “Add to Chrome” to add it to your browser. Make sure the API Enabled option is checked. Learn more about the browser extension here . Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Follow MultiOn Use browse in local mode to follow us on X. TypeScript Python 1 const followResponse = await multion.browse({ 2 cmd: "Follow @MultiOn_AI on X", 3 url: "https://x.com", 4 local: true 5 }); 6 7 console.log(followResponse.message); Hello world! Continue the same session to say hi to the world. TypeScript Python 1 const sessionId = followResponse.sessionId 2 3 const postResponse = await multion.browse({ 4 sessionId: sessionId, 5 cmd: "Post 'Hello world, I love @MultiOn_AI!'" 6 }); 7 8 console.log(postResponse.message); Was this page helpful? Yes No Scrape H&M Up Next On this page Project setup Follow MultiOn Hello world! Built with

--- https://docs.multion.ai/release/developer#june-14-2024 ---
Developer Platform Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Release Notes Developer Platform Browser Extension Support Dashboard Release Notes Developer Platform See all the latest changes in the MultiOn Agent API and developer platform. June 18, 2024 Complete documentation overhaul with new guides, examples, and release notes! June 14, 2024 New retrieve is live with faster speeds and better accuracy. Learn more about it here . Was this page helpful? Yes No Browser Extension Up Next On this page June 18, 2024 June 14, 2024 Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/retrieve#request.body.cmd ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Retrieve POST https:// api.multion.ai / v1 / web / retrieve Retrieve data from webpage based on a url and natural language command that guides agents data extraction process. The function can create a new session or be used as part of a session. Request This endpoint expects an object. cmd string Required A specific natural language instruction on data the agent should extract. url string Optional The URL to create or continue session from. session_id string Optional Continues the session with session_id if provided. local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. fields list of strings Optional List of fields (columns) to be outputted in data. format "json" Optional Format of response data. (Default: json) max_items double Optional Defaults to 100 Maximum number of data items to retrieve. (Default: 100) full_page boolean Optional Flag to retrieve full page (Default: True). If set to false, the data will only be retrieved from the current session viewport. render_js boolean Optional Flag to include rich JS and ARIA elements in data retrieved. (Default: False) scroll_to_bottom boolean Optional Flag to scroll to the bottom of the page (Default: False). If set to true, the page will be scrolled to the bottom for a maximum of 5 seconds before data is retrieved. include_screenshot boolean Optional Flag to include a screenshot with the response. (Default: False) Response Expand all Collapse all This endpoint returns an object message string information relating to response url string The last accessed URL during the session. status string The current status of the session. data list of maps from strings to any Array of data objects, each containing data requested in fields. screenshot string Optional image url of the screenshot taken during the session. session_id string Optional The unique identifier for the session. POST / v1 / web / retrieve cURL 1 curl -X POST https://api.multion.ai/v1/web/retrieve \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews and get its title and points.", 6 "url": "https://news.ycombinator.com/", 7 "fields": [ 8 "title", 9 "points" 10 ] 11 }' 200 Successful 1 { 2 "message": "Retrieved data successfully", 3 "url": "https://news.ycombinator.com/", 4 "status": "DONE", 5 "data": [ 6 { 7 "title": "Show HN: Sonauto – a more controllable AI music creator", 8 "points": 219 9 } 10 ], 11 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 12 "session_id": "1" 13 } Built with

--- https://docs.multion.ai/learn/retrieve#scroll-to-bottom ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/release/developer#june-18-2024 ---
Developer Platform Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Release Notes Developer Platform Browser Extension Support Dashboard Release Notes Developer Platform See all the latest changes in the MultiOn Agent API and developer platform. June 18, 2024 Complete documentation overhaul with new guides, examples, and release notes! June 14, 2024 New retrieve is live with faster speeds and better accuracy. Learn more about it here . Was this page helpful? Yes No Browser Extension Up Next On this page June 18, 2024 June 14, 2024 Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/retrieve#request.body.local ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Retrieve POST https:// api.multion.ai / v1 / web / retrieve Retrieve data from webpage based on a url and natural language command that guides agents data extraction process. The function can create a new session or be used as part of a session. Request This endpoint expects an object. cmd string Required A specific natural language instruction on data the agent should extract. url string Optional The URL to create or continue session from. session_id string Optional Continues the session with session_id if provided. local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. fields list of strings Optional List of fields (columns) to be outputted in data. format "json" Optional Format of response data. (Default: json) max_items double Optional Defaults to 100 Maximum number of data items to retrieve. (Default: 100) full_page boolean Optional Flag to retrieve full page (Default: True). If set to false, the data will only be retrieved from the current session viewport. render_js boolean Optional Flag to include rich JS and ARIA elements in data retrieved. (Default: False) scroll_to_bottom boolean Optional Flag to scroll to the bottom of the page (Default: False). If set to true, the page will be scrolled to the bottom for a maximum of 5 seconds before data is retrieved. include_screenshot boolean Optional Flag to include a screenshot with the response. (Default: False) Response Expand all Collapse all This endpoint returns an object message string information relating to response url string The last accessed URL during the session. status string The current status of the session. data list of maps from strings to any Array of data objects, each containing data requested in fields. screenshot string Optional image url of the screenshot taken during the session. session_id string Optional The unique identifier for the session. POST / v1 / web / retrieve cURL 1 curl -X POST https://api.multion.ai/v1/web/retrieve \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews and get its title and points.", 6 "url": "https://news.ycombinator.com/", 7 "fields": [ 8 "title", 9 "points" 10 ] 11 }' 200 Successful 1 { 2 "message": "Retrieved data successfully", 3 "url": "https://news.ycombinator.com/", 4 "status": "DONE", 5 "data": [ 6 { 7 "title": "Show HN: Sonauto – a more controllable AI music creator", 8 "points": 219 9 } 10 ], 11 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 12 "session_id": "1" 13 } Built with

--- https://docs.multion.ai/sdks/node#timeouts ---
Node.js SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Node.js SDK Installation $ npm install --save multion > # or > yarn add multion In Deno (1.25+) you can import by doing: 1 import { MultiOnClient } from "npm:multion"; Usage 1 import { MultiOnClient, MultiOn } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "YOUR_API_KEY", // Defaults to process.env.MULTION_API_KEY 5 }); 6 7 const response = await multion.browse({ 8 url: "https://www.google.com" 9 }) Request and Response Types The SDK exports all request and response types as TypeScript interfaces. Simply import them under the MultiOn namespace: 1 import { MultiOn } from "multion"; 2 3 const message: MultiOn.Message = { 4 url: "https://www.google.com", 5 includeScreenshot: true, 6 } Exception Handling When the API returns a non-success status code (4xx or 5xx response),
a subclass of MultiOnError will be thrown: 1 import { MultiOnError } from 'multion'; 2 3 try { 4 await multion.browse(...); 5 } catch (err) { 6 if (err instanceof MultiOnError) { 7 console.log(err.statusCode); 8 console.log(err.message); 9 console.log(err.body); 10 } 11 } Advanced Retries The MultiOn Node SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit (default: 2). A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the maxRetries request option to configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 maxRetries: 0 // override maxRetries at the request level 3 }); Timeouts The SDK defaults to a 60 second timout. Use the timeoutInSeconds option to
configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 timeoutInSeconds: 30 // override timeout to 30s 3 }); Custom HTTP client The SDK provides a way for you to customize the underlying HTTP client / Fetch function. If you’re
running in an unsupported environment, this provides a way for you to break the glass and
ensure the SDK works. 1 import { MultiOnClient } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "...", 5 fetcher: // provide your implementation here 6 }); Runtime compatiblity The SDK defaults to node-fetch but will use the global fetch client if present. The SDK
works in the following runtimes: The following runtimes are supported: Node.js 18+ Vercel Cloudflare Workers Deno v1.25+ Bun 1.0+ GitHub npm Was this page helpful? Yes No Python Up Next On this page Installation Usage Request and Response Types Exception Handling Advanced Retries Timeouts Custom HTTP client Runtime compatiblity Built with

--- https://docs.multion.ai/sdks/python#advanced ---
Python SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Python SDK Installation $ pip install multion > # or > poetry add multion Usage Simply import MultiOn and start making calls to our API. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 response = client.browse( 7 url="https://google.com" 8 ) Async Client The SDK also exports an async client so that you can make non-blocking
calls to our API. 1 from multion.client import AsyncMultiOn 2 3 client = AsyncMultiOn( 4 api_key="YOUR_API_KEY" # defaults to os.getenv("MULTION_API_KEY") 5 ) 6 7 async def main() -> None: 8 await response = client.browse( 9 url="https://google.com" 10 ) 11 12 asyncio.run(main()) Exception Handling All errors thrown by the SDK will be subclasses of ApiError . 1 import multion 2 3 try: 4 client.browse(...) 5 except multion.core.ApiError as e: # handle all errors 6 print(e.status_code) 7 print(e.body) Advanced Retries The MultiOn SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit. A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the max_retries request option to configure this behavior. 1 from multion.client import MultiOn 2 3 client = MultiOn() 4 5 client.browse(url="https://google.com", { 6 max_retries=1 # override retries for a specific method 7 }) Timeouts By default, requests time out after 60 seconds. You can configure this with a
timeout option at the client or request level. 1 from multion.client import MultiOn 2 3 client = MultiOn( 4 timeout=30.0, # all timeouts are 30 seconds 5 ) 6 7 client.brwose(url="https://google.com", { 8 timeout_in_seconds=30.0 # override timeout for a specific method 9 }) Custom HTTP client You can override the httpx client to customize it for your use-case. Some common use-cases
include support for proxies and transports. 1 import httpx 2 3 from multion.client import MultiOn 4 5 client = MultiOn( 6 http_client=httpx.Client( 7 proxies="http://my.test.proxy.example.com", 8 transport=httpx.HTTPTransport(local_address="0.0.0.0"), 9 ), 10 ) GitHub PyPi Was this page helpful? Yes No Browse Up Next On this page Installation Usage Async Client Exception Handling Advanced Retries Timeouts Custom HTTP client Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/browse ---
Browse Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Browse POST https:// api.multion.ai / v1 / web / browse Allows for browsing the web using detailed natural language commands. The function supports multi-step command execution based on the CONTINUE status of the Agent. Request This endpoint expects an object. cmd string Required A specific natural language instruction for the agent to execute url string Optional The URL to start or continue browsing from. (Default: google.com) local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. session_id string Optional Continues the session with session_id if provided. max_steps integer Optional Defaults to 20 Maximum number of steps to execute. (Default: 20) include_screenshot boolean Optional Boolean flag to include a screenshot of the final page. (Default: False) temperature double Optional The temperature of model mode enum Optional The mode you would like to use for the session. 'fast', 'standard', or 'ludicrous'. Allowed values: fast standard ludicrous use_proxy boolean Optional Boolean flag to use a proxy for the session (Default: False). Each Session gets a new Residential IP. Response This endpoint returns an object message string The final message or result of the browsing session. status string The final status of the browsing session. One of [“CONTINUE”, “ASK_USER”, “DONE”] url string The current URL of the session. screenshot string image url of the screenshot taken during the session. session_id string The unique identifier for the session. metadata object Optional Additional metadata for the session Show 3 properties POST / v1 / web / browse cURL 1 curl -X POST https://api.multion.ai/v1/web/browse \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews.", 6 "url": "https://news.ycombinator.com/" 7 }' 200 Successful 1 { 2 "message": "Memorizing the following information: The top post on Hacker News is \"Show HN: Sonauto – a more controllable AI music creator\" with 219 points.\n", 3 "status": "DONE", 4 "url": "https://news.ycombinator.com/", 5 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 6 "session_id": "1", 7 "metadata": { 8 "step_count": 1, 9 "processing_time": 10, 10 "temperature": 0.2 11 } 12 } Built with

--- https://docs.multion.ai/learn/retrieve#retrieve-js-elements ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Retrieve What is retrieve? Retrieve is a function that allows you to retrieve structured data from any webpage. Use it to scrape and summarize information without creating traditional web scraping scripts. It can be used standalone or as part of an agent session . Combine retrieve with step to create truly autonomous web research agents that can navigate sites and retreive full page data. Retrieve data Call retrieve with a URL and a command to create a new agent session and start retrieving data. The data will be returned as a JSON array of objects. While it is optional, we recommend that you specify fields for structured data outputs. It is also helpful to specify what each field means and the desired type in cmd . TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const data = retrieveResponse.data; Local mode Use the local flag to run retrieve locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 local: true 6 }); Max items Use the max_items param to limit the number of items to retrieve. This is helpful for pages with lots of data, which usually takes more time to retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 maxItems: 10 6 }); Retrieve viewport only Set the full_page flag to false to retrieve from the agent viewport only. By default, retrieve will crawl the full page regardless of scrolling. Note that crawling the full page does not move the viewport, so dynamically loaded content can still be hidden. To ensure all content is loaded, use scroll to bottom . TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 fullPage: false 6 }); Retrieve JS elements Use the render_js flag to render and retrieve JS and ARIA elements. This is helpful for retrieving image URLs, but will slow down the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 renderJs: true 6 }); Scroll to bottom Use the scroll_to_bottom flag to scroll to the bottom of the page before retrieving data. This is helpful for websites that dynamically load more content as you scroll down. If the retrieved data has more fields in the first few items or returns only items from the top of the page, consider setting scroll_to_bottom to true. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 scrollToBottom: true 6 }); Get retreive screenshot Use the include_screenshot flag to include a screenshot URL of the retrieval in the response. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 3 url: "https://news.ycombinator.com/", 4 fields: ["title", "creator", "time", "points", "comments", "url"], 5 includeScreenshot: true 6 }); 7 8 const screenshot = retrieveResponse.screenshot Retrieve as part of a session Use retrieve as part of a session to retrieve data alongside step actions. Calling retrieve without a session ID will create a new session. You can get the new session ID from the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const retrieveResponse = await multion.retrieve({ 6 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 7 url: "https://news.ycombinator.com/", 8 fields: ["title", "creator", "time", "points", "comments", "url"] 9 }); 10 11 const sessionId = retrieveResponse.sessionId; You can also call retrieve with a session ID to use it as part of an already-created session. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; 10 11 const retrieveResponse = await multion.retrieve({ 12 sessionId: sessionId, 13 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 14 fields: ["title", "creator", "time", "points", "comments", "url"] 15 }); Use proxy Use the use_proxy flag with create session to enable proxy for retrieve to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/", 7 useProxy: true 8 }); 9 10 const sessionId = createResponse.sessionId; 11 12 const retrieveResponse = await multion.retrieve({ 13 sessionId: sessionId, 14 cmd: "Get all posts on Hackernews with title, creator, time created, points as a number, number of comments as a number, and the post URL.", 15 fields: ["title", "creator", "time", "points", "comments", "url"] 16 }); Was this page helpful? Yes No Skills Up Next On this page What is retrieve? Retrieve data Local mode Max items Retrieve viewport only Retrieve JS elements Scroll to bottom Get retreive screenshot Retrieve as part of a session Use proxy Built with

--- https://docs.multion.ai/api-reference/sessions/close#request.path ---
Close Session Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Step API Reference Close Session DEL https:// api.multion.ai / v1 / web / session / : session_id Closes the session. Path parameters session_id string Required Response This endpoint returns an object status string response data session_id string The unique identifier for the session, duplicated for convenience. DEL / v1 / web / session / : session_id cURL 1 curl -X DELETE https://api.multion.ai/v1/web/session/session_id \ 2 -H "X_MULTION_API_KEY: <apiKey>" 200 Deleted 1 { 2 "status": "status", 3 "session_id": "session_id" 4 } Built with

--- https://docs.multion.ai/sdks/node#installation ---
Node.js SDK Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard SDKs Node.js SDK Installation $ npm install --save multion > # or > yarn add multion In Deno (1.25+) you can import by doing: 1 import { MultiOnClient } from "npm:multion"; Usage 1 import { MultiOnClient, MultiOn } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "YOUR_API_KEY", // Defaults to process.env.MULTION_API_KEY 5 }); 6 7 const response = await multion.browse({ 8 url: "https://www.google.com" 9 }) Request and Response Types The SDK exports all request and response types as TypeScript interfaces. Simply import them under the MultiOn namespace: 1 import { MultiOn } from "multion"; 2 3 const message: MultiOn.Message = { 4 url: "https://www.google.com", 5 includeScreenshot: true, 6 } Exception Handling When the API returns a non-success status code (4xx or 5xx response),
a subclass of MultiOnError will be thrown: 1 import { MultiOnError } from 'multion'; 2 3 try { 4 await multion.browse(...); 5 } catch (err) { 6 if (err instanceof MultiOnError) { 7 console.log(err.statusCode); 8 console.log(err.message); 9 console.log(err.body); 10 } 11 } Advanced Retries The MultiOn Node SDK is instrumented with automatic retries with exponential backoff. A request will be
retried as long as the request is deemed retriable and the number of retry attempts has not grown larger
than the configured retry limit (default: 2). A request is deemed retriable when any of the following HTTP status codes is returned: 408 (Timeout) 429 (Too Many Requests) 5XX (Internal Server Errors) Use the maxRetries request option to configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 maxRetries: 0 // override maxRetries at the request level 3 }); Timeouts The SDK defaults to a 60 second timout. Use the timeoutInSeconds option to
configure this behavior. 1 const response = multion.browse({ url: "https://google.com" }, { 2 timeoutInSeconds: 30 // override timeout to 30s 3 }); Custom HTTP client The SDK provides a way for you to customize the underlying HTTP client / Fetch function. If you’re
running in an unsupported environment, this provides a way for you to break the glass and
ensure the SDK works. 1 import { MultiOnClient } from 'multion'; 2 3 const multion = new MultiOnClient({ 4 apiKey: "...", 5 fetcher: // provide your implementation here 6 }); Runtime compatiblity The SDK defaults to node-fetch but will use the global fetch client if present. The SDK
works in the following runtimes: The following runtimes are supported: Node.js 18+ Vercel Cloudflare Workers Deno v1.25+ Bun 1.0+ GitHub npm Was this page helpful? Yes No Python Up Next On this page Installation Usage Request and Response Types Exception Handling Advanced Retries Timeouts Custom HTTP client Runtime compatiblity Built with

--- https://docs.multion.ai/build/hm#initialize-client ---
Scrape H&M with MultiOn Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Build With MultiOn Scrape H&M with MultiOn This example combines MultiOn step and retrieve to scrape the H&M website catalog. Project setup TypeScript Python Initialize project Create a new project by running the following command in your terminal: $ npm init Install package Install the multion package by running the following command in your terminal: $ npm install multion Import library Create a new file called index.ts and import the required library for the example: 1 import { MultiOnClient } from 'multion'; Initialize client Initialize the MultiOn client with your API key. 1 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); Run script Run your script by running the following command in your terminal: $ node index.ts Scrape first page To scrape the first page of the H&M catalog, we can simply call retrieve. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"] 5 }); 6 7 const data = retrieveResponse.data; 8 console.log(data); However, you might notice that while the first few items are complete, the rest are incomplete and some are even broken—especially images. This is because H&M dynamically loads the images as the user scrolls down the page. To help with this, we can use renderJs to ensure image links are included and scrollToBottom to scroll down the page. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true 7 }); 8 9 const data = retrieveResponse.data; 10 console.log(data); If we only want 10 items from the page, we can use maxItems to speed up the request. TypeScript Python 1 const retrieveResponse = await multion.retrieve({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html", 3 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 4 fields: ["name", "price", "colors", "purchase_url", "image_url"], 5 renderJs: true, 6 scrollToBottom: true, 7 maxItems: 10 8 }); 9 10 const data = retrieveResponse.data; 11 console.log(data); Scrape multiple pages autonomously To scrape multiple pages autonomously, we can use retrieve with step to navigate to next page. To do this, we must first create a session. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://www2.hm.com/en_us/men/products/view-all.html" 3 // Can set useProxy to true to circumvent IP block 4 }); 5 6 const sessionId = createResponse.sessionId; 7 console.log("Session created: ", sessionId); Then, we can create a while loop that will keep running until the last page. At each iteration, the agent will retrieve data and step to navigate to the next page. TypeScript Python 1 let hasMore = true; 2 while (hasMore) { 3 const retrieveResponse = await multion.retrieve({ 4 sessionId: sessionId, 5 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 6 fields: ["name", "price", "colors", "purchase_url", "image_url"], 7 renderJs: true, 8 scrollToBottom: true 9 }); 10 console.log("Data retrieved: ", retrieveResponse.data); 11 const stepResponse = await multion.sessions.step(sessionId, { 12 cmd: "Keep clicking on the next page button.", 13 mode: "ludicrous", 14 }); 15 console.log("Navigating to next page: ", stepResponse.message); 16 hasMore = !stepResponse.message.includes("last page"); 17 // Can implement better way of checking if more pages to scrape 18 } Scrape multiple pages in parallel To massively speed up the scraping process, we can call retrieve for each page simultaneously. This works for H&M because the URL is numbered for each page. TypeScript Python 1 for (let i = 1; i <= 10; i++) { 2 const retrieveResponse = await multion.retrieve({ 3 url: `https://www2.hm.com/en_us/men/products/view-all.html?page=${i}`, 4 cmd: "Get all items and their name, price, colors, purchase url, and image url.", 5 fields: ["name", "price", "colors", "purchase_url", "image_url"], 6 renderJs: true, 7 scrollToBottom: true 8 }); 9 console.log(`Data retrieved for page ${i}: `, retrieveResponse.data); 10 } Was this page helpful? Yes No Order on Amazon Up Next On this page Project setup Scrape first page Scrape multiple pages autonomously Scrape multiple pages in parallel Built with

--- https://docs.multion.ai/api-reference/autonomous-api-reference/retrieve#response.body.screenshot ---
Retrieve Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes SDKs Client SDKs Node.js Python Autonomous API Reference POST Browse POST Retrieve Step API Reference POST Create Session STREAM Step Session DEL Close Session GET Screenshot GET List Sessions Support Dashboard Autonomous API Reference Retrieve POST https:// api.multion.ai / v1 / web / retrieve Retrieve data from webpage based on a url and natural language command that guides agents data extraction process. The function can create a new session or be used as part of a session. Request This endpoint expects an object. cmd string Required A specific natural language instruction on data the agent should extract. url string Optional The URL to create or continue session from. session_id string Optional Continues the session with session_id if provided. local boolean Optional Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud. fields list of strings Optional List of fields (columns) to be outputted in data. format "json" Optional Format of response data. (Default: json) max_items double Optional Defaults to 100 Maximum number of data items to retrieve. (Default: 100) full_page boolean Optional Flag to retrieve full page (Default: True). If set to false, the data will only be retrieved from the current session viewport. render_js boolean Optional Flag to include rich JS and ARIA elements in data retrieved. (Default: False) scroll_to_bottom boolean Optional Flag to scroll to the bottom of the page (Default: False). If set to true, the page will be scrolled to the bottom for a maximum of 5 seconds before data is retrieved. include_screenshot boolean Optional Flag to include a screenshot with the response. (Default: False) Response Expand all Collapse all This endpoint returns an object message string information relating to response url string The last accessed URL during the session. status string The current status of the session. data list of maps from strings to any Array of data objects, each containing data requested in fields. screenshot string Optional image url of the screenshot taken during the session. session_id string Optional The unique identifier for the session. POST / v1 / web / retrieve cURL 1 curl -X POST https://api.multion.ai/v1/web/retrieve \ 2 -H "X_MULTION_API_KEY: <apiKey>" \ 3 -H "Content-Type: application/json" \ 4 -d '{ 5 "cmd": "Find the top post on Hackernews and get its title and points.", 6 "url": "https://news.ycombinator.com/", 7 "fields": [ 8 "title", 9 "points" 10 ] 11 }' 200 Successful 1 { 2 "message": "Retrieved data successfully", 3 "url": "https://news.ycombinator.com/", 4 "status": "DONE", 5 "data": [ 6 { 7 "title": "Show HN: Sonauto – a more controllable AI music creator", 8 "points": 219 9 } 10 ], 11 "screenshot": "https://api.multion.ai/v1/web/screenshot/1", 12 "session_id": "1" 13 } Built with

--- https://docs.multion.ai/learn/sessions#browse-automatically ---
Sessions Search... / Support Dashboard Documentation API Reference Release Notes Documentation API Reference Release Notes Get Started Welcome Quick Start Learn About MultiOn Browser Extension Sessions Retrieve Skills Build With MultiOn Post on X Scrape H&M Order on Amazon Cookbook Support Dashboard Learn About MultiOn Sessions What is an agent session? Session Lifecycle An agent session is a stateful instance of interaction with our agent for a specific user query or workflow. Each agent session is fully isolated and can be used to perform multiple sequential steps. When a session is created with a command, the agent generates a plan to complete the command. With browse , the agent will step automatically until the action is completed or the agent requires additional input. With step session , you can supply additional information to refine the plan and help the agent at each step. Session lifecycle: An agent session begins when you initiate it with an input URL and an instruction prompt and ends when it has been closed or the session has expired. A session survives for 10 minutes if left inactive. Local mode: By default, sessions are hosted remotely in the cloud using our virtual headless browser. In local mode, our server-hosted agent interacts with your installed Chrome browser extension. Learn more here . Security: In remote mode, each agent session is fully isolated, protecting the integrity of your data and interactions. Browse automatically Browse allows you to automatically create an agent session with a URL and a command. It will step through the session until the action is completed or the agent requires additional input. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const browseResponse = await multion.browse({ 6 cmd: "Find the top comment of the top post on Hackernews.", 7 url: "https://news.ycombinator.com/" 8 }); Create a session manually Create session allows you to manually create an agent session with a URL. You can continue the session using the session_id returned in the response. TypeScript Python 1 import { MultiOnClient } from "multion"; 2 3 const multion = new MultiOnClient({ apiKey: "YOUR_API_KEY" }); 4 5 const createResponse = await multion.sessions.create({ 6 url: "https://news.ycombinator.com/" 7 }); 8 9 const sessionId = createResponse.sessionId; Local mode Use the local flag to run the agent locally on your browser. Make sure the browser extension is installed and API Enabled is checked. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 local: true 4 }); Speed modes Use the mode param to specify the speed model of the agent. Under the hood, this changes which LLM model is used. standard is good for complex tasks, ludicrous is good for simple tasks, and fast is a balance of the two. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 mode: "ludicrous" 4 }); Use proxy Use the use_proxy flag to enable proxy for the session to bypass IP blocks and bot protections. When enabled, the agent will be slightly slower to respond. TypeScript Python 1 const createResponse = await multion.sessions.create({ 2 url: "https://news.ycombinator.com/", 3 useProxy: true 4 }); Step through a session Step session allows you to step through an agent session with a command. It will return a response with the status of the agent. Status can be one of CONTINUE , ASK_USER , and DONE . If the status is ASK_USER , you can provide additional information to the agent in the cmd field. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews." 3 }); 4 5 const status = stepResponse.status You can keep stepping through the session until the status is ASK_USER or DONE . TypeScript Python 1 let status = "CONTINUE"; 2 3 while (status === "CONTINUE") { 4 const stepResponse = await multion.sessions.step("session_id", { 5 cmd: "Find the top comment of the top post on Hackernews." 6 }); 7 status = stepResponse.status 8 // Do something if status is "ASK_USER" 9 // Do something else if status is "DONE" 10 } Get session screenshot Use the include_screenshot flag to include a screenshot URL of the session in the response. TypeScript Python 1 const stepResponse = await multion.sessions.step("session_id", { 2 cmd: "Find the top comment of the top post on Hackernews.", 3 includeScreenshot: true 4 }); 5 6 const screenshot = stepResponse.screenshot Close a session manually To close a session before it expires, use close session . TypeScript Python 1 await multion.sessions.close("session_id"); Was this page helpful? Yes No Retrieve Up Next On this page What is an agent session? Browse automatically Create a session manually Local mode Speed modes Use proxy Step through a session Get session screenshot Close a session manually Built with

